// Author: Cloud
// Date: 2022-12-24
// This is for my girl friend

#include <iostream>
#include <random>
#include <windows.h>

using namespace std;

#pragma execution_character_set("utf-8")

#define cls cout << "\033c"
#define TOP_SPACE 5
#define LEFT_SPACE 8
#define HEIGHT 16

#define C_BLACK "\u001b[38;5;0m"
#define C_RED "\u001b[38;5;9m"

#define WID 7
#define WIDD 14

const char* colorps[256] = {
    "\u001b[38;5;0m",
    "\u001b[38;5;1m",
    "\u001b[38;5;2m",
    "\u001b[38;5;3m",
    "\u001b[38;5;4m",
    "\u001b[38;5;5m",
    "\u001b[38;5;6m",
    "\u001b[38;5;7m",
    "\u001b[38;5;8m",
    "\u001b[38;5;9m",
    "\u001b[38;5;10m",
    "\u001b[38;5;11m",
    "\u001b[38;5;12m",
    "\u001b[38;5;13m",
    "\u001b[38;5;14m",
    "\u001b[38;5;15m",
    "\u001b[38;5;16m",
    "\u001b[38;5;17m",
    "\u001b[38;5;18m",
    "\u001b[38;5;19m",
    "\u001b[38;5;20m",
    "\u001b[38;5;21m",
    "\u001b[38;5;22m",
    "\u001b[38;5;23m",
    "\u001b[38;5;24m",
    "\u001b[38;5;25m",
    "\u001b[38;5;26m",
    "\u001b[38;5;27m",
    "\u001b[38;5;28m",
    "\u001b[38;5;29m",
    "\u001b[38;5;30m",
    "\u001b[38;5;31m",
    "\u001b[38;5;32m",
    "\u001b[38;5;33m",
    "\u001b[38;5;34m",
    "\u001b[38;5;35m",
    "\u001b[38;5;36m",
    "\u001b[38;5;37m",
    "\u001b[38;5;38m",
    "\u001b[38;5;39m",
    "\u001b[38;5;40m",
    "\u001b[38;5;41m",
    "\u001b[38;5;42m",
    "\u001b[38;5;43m",
    "\u001b[38;5;44m",
    "\u001b[38;5;45m",
    "\u001b[38;5;46m",
    "\u001b[38;5;47m",
    "\u001b[38;5;48m",
    "\u001b[38;5;49m",
    "\u001b[38;5;50m",
    "\u001b[38;5;51m",
    "\u001b[38;5;52m",
    "\u001b[38;5;53m",
    "\u001b[38;5;54m",
    "\u001b[38;5;55m",
    "\u001b[38;5;56m",
    "\u001b[38;5;57m",
    "\u001b[38;5;58m",
    "\u001b[38;5;59m",
    "\u001b[38;5;60m",
    "\u001b[38;5;61m",
    "\u001b[38;5;62m",
    "\u001b[38;5;63m",
    "\u001b[38;5;64m",
    "\u001b[38;5;65m",
    "\u001b[38;5;66m",
    "\u001b[38;5;67m",
    "\u001b[38;5;68m",
    "\u001b[38;5;69m",
    "\u001b[38;5;70m",
    "\u001b[38;5;71m",
    "\u001b[38;5;72m",
    "\u001b[38;5;73m",
    "\u001b[38;5;74m",
    "\u001b[38;5;75m",
    "\u001b[38;5;76m",
    "\u001b[38;5;77m",
    "\u001b[38;5;78m",
    "\u001b[38;5;79m",
    "\u001b[38;5;80m",
    "\u001b[38;5;81m",
    "\u001b[38;5;82m",
    "\u001b[38;5;83m",
    "\u001b[38;5;84m",
    "\u001b[38;5;85m",
    "\u001b[38;5;86m",
    "\u001b[38;5;87m",
    "\u001b[38;5;88m",
    "\u001b[38;5;89m",
    "\u001b[38;5;90m",
    "\u001b[38;5;91m",
    "\u001b[38;5;92m",
    "\u001b[38;5;93m",
    "\u001b[38;5;94m",
    "\u001b[38;5;95m",
    "\u001b[38;5;96m",
    "\u001b[38;5;97m",
    "\u001b[38;5;98m",
    "\u001b[38;5;99m",
    "\u001b[38;5;100m",
    "\u001b[38;5;101m",
    "\u001b[38;5;102m",
    "\u001b[38;5;103m",
    "\u001b[38;5;104m",
    "\u001b[38;5;105m",
    "\u001b[38;5;106m",
    "\u001b[38;5;107m",
    "\u001b[38;5;108m",
    "\u001b[38;5;109m",
    "\u001b[38;5;110m",
    "\u001b[38;5;111m",
    "\u001b[38;5;112m",
    "\u001b[38;5;113m",
    "\u001b[38;5;114m",
    "\u001b[38;5;115m",
    "\u001b[38;5;116m",
    "\u001b[38;5;117m",
    "\u001b[38;5;118m",
    "\u001b[38;5;119m",
    "\u001b[38;5;120m",
    "\u001b[38;5;121m",
    "\u001b[38;5;122m",
    "\u001b[38;5;123m",
    "\u001b[38;5;124m",
    "\u001b[38;5;125m",
    "\u001b[38;5;126m",
    "\u001b[38;5;127m",
    "\u001b[38;5;128m",
    "\u001b[38;5;129m",
    "\u001b[38;5;130m",
    "\u001b[38;5;131m",
    "\u001b[38;5;132m",
    "\u001b[38;5;133m",
    "\u001b[38;5;134m",
    "\u001b[38;5;135m",
    "\u001b[38;5;136m",
    "\u001b[38;5;137m",
    "\u001b[38;5;138m",
    "\u001b[38;5;139m",
    "\u001b[38;5;140m",
    "\u001b[38;5;141m",
    "\u001b[38;5;142m",
    "\u001b[38;5;143m",
    "\u001b[38;5;144m",
    "\u001b[38;5;145m",
    "\u001b[38;5;146m",
    "\u001b[38;5;147m",
    "\u001b[38;5;148m",
    "\u001b[38;5;149m",
    "\u001b[38;5;150m",
    "\u001b[38;5;151m",
    "\u001b[38;5;152m",
    "\u001b[38;5;153m",
    "\u001b[38;5;154m",
    "\u001b[38;5;155m",
    "\u001b[38;5;156m",
    "\u001b[38;5;157m",
    "\u001b[38;5;158m",
    "\u001b[38;5;159m",
    "\u001b[38;5;160m",
    "\u001b[38;5;161m",
    "\u001b[38;5;162m",
    "\u001b[38;5;163m",
    "\u001b[38;5;164m",
    "\u001b[38;5;165m",
    "\u001b[38;5;166m",
    "\u001b[38;5;167m",
    "\u001b[38;5;168m",
    "\u001b[38;5;169m",
    "\u001b[38;5;170m",
    "\u001b[38;5;171m",
    "\u001b[38;5;172m",
    "\u001b[38;5;173m",
    "\u001b[38;5;174m",
    "\u001b[38;5;175m",
    "\u001b[38;5;176m",
    "\u001b[38;5;177m",
    "\u001b[38;5;178m",
    "\u001b[38;5;179m",
    "\u001b[38;5;180m",
    "\u001b[38;5;181m",
    "\u001b[38;5;182m",
    "\u001b[38;5;183m",
    "\u001b[38;5;184m",
    "\u001b[38;5;185m",
    "\u001b[38;5;186m",
    "\u001b[38;5;187m",
    "\u001b[38;5;188m",
    "\u001b[38;5;189m",
    "\u001b[38;5;190m",
    "\u001b[38;5;191m",
    "\u001b[38;5;192m",
    "\u001b[38;5;193m",
    "\u001b[38;5;194m",
    "\u001b[38;5;195m",
    "\u001b[38;5;196m",
    "\u001b[38;5;197m",
    "\u001b[38;5;198m",
    "\u001b[38;5;199m",
    "\u001b[38;5;200m",
    "\u001b[38;5;201m",
    "\u001b[38;5;202m",
    "\u001b[38;5;203m",
    "\u001b[38;5;204m",
    "\u001b[38;5;205m",
    "\u001b[38;5;206m",
    "\u001b[38;5;207m",
    "\u001b[38;5;208m",
    "\u001b[38;5;209m",
    "\u001b[38;5;210m",
    "\u001b[38;5;211m",
    "\u001b[38;5;212m",
    "\u001b[38;5;213m",
    "\u001b[38;5;214m",
    "\u001b[38;5;215m",
    "\u001b[38;5;216m",
    "\u001b[38;5;217m",
    "\u001b[38;5;218m",
    "\u001b[38;5;219m",
    "\u001b[38;5;220m",
    "\u001b[38;5;221m",
    "\u001b[38;5;222m",
    "\u001b[38;5;223m",
    "\u001b[38;5;224m",
    "\u001b[38;5;225m",
    "\u001b[38;5;226m",
    "\u001b[38;5;227m",
    "\u001b[38;5;228m",
    "\u001b[38;5;229m",
    "\u001b[38;5;230m",
    "\u001b[38;5;231m",
    "\u001b[38;5;232m",
    "\u001b[38;5;233m",
    "\u001b[38;5;234m",
    "\u001b[38;5;235m",
    "\u001b[38;5;236m",
    "\u001b[38;5;237m",
    "\u001b[38;5;238m",
    "\u001b[38;5;239m",
    "\u001b[38;5;240m",
    "\u001b[38;5;241m",
    "\u001b[38;5;242m",
    "\u001b[38;5;243m",
    "\u001b[38;5;244m",
    "\u001b[38;5;245m",
    "\u001b[38;5;246m",
    "\u001b[38;5;247m",
    "\u001b[38;5;248m",
    "\u001b[38;5;249m",
    "\u001b[38;5;250m",
    "\u001b[38;5;251m",
    "\u001b[38;5;252m",
    "\u001b[38;5;253m",
    "\u001b[38;5;254m",
    "\u001b[38;5;255m",
};

int colorPick[22] = { 11, 15, 51, 87, 123, 99, 129, 160, 165, 190, 184, 196, 202, 214, 220, 226, 227, 228, 229, 230, 231, 253 };

int main()
{
    while (1)
    {
        system("cls");
        for (int i = 0; i < TOP_SPACE; i++)
        {
            cout << "\n";
        }

        for (int j = 0; j < LEFT_SPACE; j++)
            cout << " ";
        for (int j = 0; j < HEIGHT; j++)
            cout << " ";
        cout << colorps[226] << "A"
            << "\n";
        for (int j = 0; j < LEFT_SPACE; j++)
            cout << " ";
        for (int j = 0; j < HEIGHT - 1; j++)
            cout << " ";
        cout << colorps[226] << "/X\\"
            << "\n";

        int lol[HEIGHT * 2 + 1];
        for (int i = 0; i < HEIGHT; i++)
        {
            for (int j = 0; j < LEFT_SPACE; j++)
                cout << " ";
            for (int j = 0; j < HEIGHT - i; j++)
                cout << " ";
            int total = (i * 2 + 1);
            memset(lol, 0, sizeof(int) * total);
            int lside = (total % WIDD) / 2;
            int rside = (total % WIDD) - (total % WIDD) / 2;
            if (lside >= 2)
                lol[rand() % lside] = 1;
            for (int j = 0; j < total / WID; j++)
                lol[(rand() % (WID - 2) + 1) + lside + j * WID] = 1;
            if (rside >= 2)
                lol[rand() % rside + total % WIDD + lside] = 1;
            cout << "\033[32m";
            for (int j = 0; j < i * 2 + 1; j++)
            {
                if (lol[j] == 1)
                {
                    cout << colorps[colorPick[rand() % 22]];
                    cout << "O";
                    cout << "\033[32m";
                }
                else
                {
                    cout << "*";
                }
            }
            for (int j = 0; j < HEIGHT - i; j++)
                cout << " ";
            cout << "\n";
        }

        for (int j = 0; j < LEFT_SPACE + HEIGHT - 1; j++)
            cout << " ";
        cout << "\033[1;33mMWM"
            << "\n";
        for (int j = 0; j < LEFT_SPACE + HEIGHT - 1; j++)
            cout << " ";
        cout << "\033[1;33mMWM"
            << "\n";

        cout << "\n";
        cout << colorps[213];
        for (int j = 0; j < LEFT_SPACE + HEIGHT / 2; j++)
            cout << " ";
        cout << "Merry Christmas 2022!!!!!"
            << "\n";

        cout << flush;
        Sleep(1000);
    }
}
